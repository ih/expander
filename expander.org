* <2013-06-06 Thu 23:15>
Implemented helper functions for updating an expander (including the connection to other expanders).  Need to step-through and test that it works
* <2013-06-04 Tue 09:38>
Editing will work by having an edit button on the expander template, when it is clicked the content etc turn into text fields and editing the border will be done via the selection mechanism. The event for handling selection mouseup .content will do something different if an expander is being edited, e.g. hide the expander creator.
* <2013-05-27 Mon 23:27>
Started going trhough discover meteor and refactoring based on it.

Currently on routing chapter and will try to make viewing expanders based on url possible 
* <2013-05-10 Fri 21:00>
Using update with $set moderator to replace the entire fragment list with every change to a border, should probably find a more efficient way to do this.

Setting the border seems to create a lot of new fragments.  Maybe event propagation?
* <2013-05-09 Thu 08:38>
There doesn't seem to be two way binding for meteor to form inputs.  Here is a suggestion on how to do it https://groups.google.com/forum/?fromgroups=#!topic/meteor-talk/fpf2FAJdAZ4

How do you access the element for an event (e.g. the input element where the change/keyup occurred)?  Would like to be able to pass which border to update based on a property of the html element rather than have two different events in the event map.

You can use event.currentTarget where event is passed to the event handler in the event map.

What goes into updating a border for a fragment?  Need to find the correct fragment in an expander and modify it's border value.  Should fragments be a separate collection?
* <2013-04-22 Mon 22:13>
Made the borders of the fragments colored

Make the fragment boundaries editable, for now have two text fields that can be adjusted

Seems like it might make sense for fragments viewer to iterate over fragments instead of expanders so we can have a fragment template that displays additional information (e.g. fragment marker location) that is fragment specific.

Problem getting the expander corresponding to the fragment in the fragmentsViewer each loop, one "hack" would be to attach the correct expander to the fragment object in getHighlightedFragments...

Solved passing the fragment into a fragment template then writing a getExpander function for that template that does not need a parameter
* <2013-04-20 Sat 08:33>
Modifying inserFragmentMarkers worked, but the color doesn't always show up.

Fixed the color situation by having the colors get added every time the expander template is rendered by adding a rendered function to the template.
* <2013-04-18 Thu 19:53>
Seems like deps.autorun might be re-rendering the page, in which case insertFragmentMarkers would be rerun and the hide class is added back again even if highlightedState is set to true.

Modify insertFragmentMarkers to only add hide class if highlightState is false
* 2013-04-17
Highlight all for the expander in a fragments list isn't working because the click event is probably getting triggered twice due to the recursive template.  Fixed by adding stopImmediatePropagation() ot the event handler.

The brackets aren't showing up for the fragment expanders.  Probably something to do with selectMode.  Check it out for next time.
